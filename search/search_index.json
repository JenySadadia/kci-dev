{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"kci-dev","text":"<p>kci-dev is a cmdline tool for interact with a enabled KernelCI server Purpose of this tool to provide a easy way to use features of KernelCI Pipeline instance.</p>"},{"location":"#installation","title":"Installation","text":""},{"location":"#using-pypi-and-virtualenv","title":"Using PyPI and virtualenv","text":"<pre><code>virtualenv .venv\nsource .venv/bin/activate\npip install kci-dev\n</code></pre>"},{"location":"#using-poetry-and-virtualenv","title":"Using poetry and virtualenv","text":"<pre><code>virtualenv .venv\nsource .venv/bin/activate\npip install poetry\npoetry install\npoetry run kci-dev\n</code></pre>"},{"location":"#configuration","title":"Configuration","text":"<p>kci-dev searches for and loads a configuration file in the following order of priority: 1) The global configuration file located at /etc/kci-dev.toml. 2) The user-specific configuration file at ~/.config/kci-dev/kci-dev.toml 3) A site-specific configuration file, which is .kci-dev.toml by default, but can be overridden with the --settings option. </p> <p>Priority: The configuration files are loaded in the order listed above, with each subsequent file overriding the settings from the previous one. If a user-specific file is present, it will override the global configuration. The site-specific file, whether default or specified by --settings, takes precedence over both the global and user-specific configuration files.</p> <pre><code>default_instance=\"local\"\n\n[local]\npipeline=\"https://127.0.0.1\"\napi=\"https://127.0.0.1:8001/\"\ntoken=\"example\"\n\n[staging]\npipeline=\"https://staging.kernelci.org:9100/\"\napi=\"https://staging.kernelci.org:9000/\"\ntoken=\"example\"\n\n[production]\npipeline=\"https://kernelci-pipeline.westus3.cloudapp.azure.com/\"\napi=\"https://kernelci-api.westus3.cloudapp.azure.com/\"\ntoken=\"example\"\n</code></pre> <p>Where <code>default_instance</code> is the default instance to use, if not provided in the command line. In section <code>local</code>, <code>staging</code>, <code>production</code> you can provide the host for the pipeline, api and also a token for the available instances. pipeline is the URL of the KernelCI Pipeline API endpoint, api is the URL of the new KernelCI API endpoint, and token is the API token to use for authentication. If you are using KernelCI Pipeline instance, you can get the token from the project maintainers. If it is a local instance, you can generate your token using kernelci-pipeline/tools/jwt_generator.py script.</p>"},{"location":"#options","title":"Options","text":""},{"location":"#instance","title":"instance","text":"<p>You can provide the instance name to use for the command.</p> <p>Example:</p> <pre><code>kci-dev --instance staging\n</code></pre>"},{"location":"#settings","title":"settings","text":"<p>You can provide the configuration file path to use for the command.</p> <p>Example:</p> <pre><code>kci-dev --settings /path/to/.kci-dev.toml\n</code></pre>"},{"location":"#commands","title":"Commands","text":""},{"location":"#checkout","title":"checkout","text":"<ul> <li>checkout</li> </ul>"},{"location":"#testretry","title":"testretry","text":"<ul> <li>testretry</li> </ul>"},{"location":"#results","title":"results","text":"<ul> <li>results</li> </ul>"},{"location":"checkout/","title":"Checkout","text":""},{"location":"checkout/#checkout","title":"checkout","text":"<p>This command allow to test arbitary commit on the KernelCI Pipeline instance. This might be useful in several cases: - You want to test a specific commit, if it fails or pass test, or introduce any other degradation comparing to the current, or another commit. - You want to create snapshot of the test results on specific tags (releases, etc). - Use this command for regression bisection</p> <p>This command can execute all tests configured for particular tree/branch, or you can provide jobfilter to execute specific tests and builds.</p> <p>Example:</p> <pre><code>kci-dev checkout --giturl https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git --branch master --commit f06021a18fcf8d8a1e79c5e0a8ec4eb2b038e153 --jobfilter \"kbuild-gcc-12-x86\"\n</code></pre> <p>Where: - <code>giturl</code> is the URL of the git repository to test. - <code>branch</code> is the branch of the git repository to test. - <code>commit</code> is the commit hash to test. - <code>jobfilter</code> is the job filter to use for the test (optional parameter) - <code>platformfilter</code> is the platform filter (usually it is name of hardware platform for group of devices) to use for the test (optional parameter)</p> <p>To figure out correct jobfilter and platformfilter, you need to check test json node. For example:</p> <pre><code>{\n  \"id\": \"670f0c27493b6b8188c7667c\",\n  \"kind\": \"job\",\n  \"name\": \"tast-mm-misc-arm64-qualcomm\",\n  \"path\": [\n    \"checkout\",\n    \"kbuild-gcc-12-arm64-chromeos-qualcomm\",\n    \"tast-mm-misc-arm64-qualcomm\"\n  ],\n  \"group\": \"tast-mm-misc-arm64-qualcomm\",\n  \"parent\": \"670f0782493b6b8188c7621c\",\n  \"state\": \"done\",\n  \"result\": \"pass\",\n  \"artifacts\": {\n    \"lava_log\": \"https://kciapistagingstorage1.file.core.windows.net/staging/tast-mm-misc-arm64-qualcomm-670f0c27493b6b8188c7667c/log.txt.gz?sv=2022-11-02&amp;ss=f&amp;srt=sco&amp;sp=r&amp;se=2024-10-17T19:19:12Z&amp;st=2023-10-17T11:19:12Z&amp;spr=https&amp;sig=sLmFlvZHXRrZsSGubsDUIvTiv%2BtzgDq6vALfkrtWnv8%3D\",\n    \"callback_data\": \"https://kciapistagingstorage1.file.core.windows.net/staging/tast-mm-misc-arm64-qualcomm-670f0c27493b6b8188c7667c/lava_callback.json.gz?sv=2022-11-02&amp;ss=f&amp;srt=sco&amp;sp=r&amp;se=2024-10-17T19:19:12Z&amp;st=2023-10-17T11:19:12Z&amp;spr=https&amp;sig=sLmFlvZHXRrZsSGubsDUIvTiv%2BtzgDq6vALfkrtWnv8%3D\"\n  },\n  \"data\": {\n    \"error_code\": null,\n    \"error_msg\": null,\n    \"test_source\": null,\n    \"test_revision\": null,\n    \"platform\": \"sc7180-trogdor-lazor-limozeen\",\n    \"device\": \"sc7180-trogdor-lazor-limozeen-cbg-7\",\n    \"runtime\": \"lava-collabora\",\n    \"job_id\": \"16081547\",\n    \"job_context\": null,\n    \"regression\": null,\n    \"kernel_revision\": {\n      \"tree\": \"kernelci\",\n      \"url\": \"https://github.com/kernelci/linux.git\",\n      \"branch\": \"staging-mainline\",\n      \"commit\": \"c862449c840a37bbe797a0b719881449beac75ca\",\n      \"describe\": \"staging-mainline-20241016.0\",\n      \"version\": {\n        \"version\": 6,\n        \"patchlevel\": 12,\n        \"sublevel\": null,\n        \"extra\": \"-rc3-45-gc862449c840a3\",\n        \"name\": null\n      },\n      \"patchset\": null,\n      \"commit_tags\": [\n        \"staging-mainline-20241016.0\"\n      ],\n      \"commit_message\": \"staging-mainline-20241016.0\",\n      \"tip_of_branch\": false\n    },\n    \"arch\": \"arm64\",\n    \"defconfig\": \"cros://chromeos-6.6/arm64/chromiumos-qualcomm.flavour.config\",\n    \"config_full\": \"+lab-setup+arm64-chromebook+CONFIG_MODULE_COMPRESS=n+CONFIG_MODULE_COMPRESS_NONE=y\",\n    \"compiler\": \"gcc-12\",\n    \"kernel_type\": \"image\"\n  },\n  \"debug\": null,\n  \"jobfilter\": null,\n  \"platform_filter\": null,\n  \"created\": \"2024-10-16T00:43:19.079000\",\n  \"updated\": \"2024-10-16T02:22:58.113000\",\n  \"timeout\": \"2024-10-16T06:43:19.079000\",\n  \"holdoff\": null,\n  \"owner\": \"staging.kernelci.org\",\n  \"submitter\": \"service:pipeline\",\n  \"treeid\": \"f53af2a7273aed52629647124c95e8ddc79a317b93bced2ee36837bde03d88af\",\n  \"user_groups\": []\n}\n</code></pre> <p>In this example, the jobfilter is <code>tast-mm-misc-arm64-qualcomm</code> for test, if you look into path, you can figure out also build job named and the platformfilter is <code>kbuild-gcc-12-arm64-chromeos-qualcomm</code> and in data/platform: <code>sc7180-trogdor-lazor-limozeen</code>. So complete command to test this job would be:</p> <pre><code>kci-dev checkout --giturl https://github.com/kernelci/linux.git --branch staging-mainline --commit c862449c840a37bbe797a0b719881449beac75ca --jobfilter tast-mm-misc-arm64-qualcomm --jobfilter kbuild-gcc-12-arm64-chromeos-qualcomm --platformfilter sc7180-trogdor-lazor-limozeen\n</code></pre> <p>Other options:</p>"},{"location":"checkout/#-tipoftree","title":"--tipoftree","text":"<p>You can also set instead of --commit option --tipoftree which will retrieve the latest commit of the tree.</p>"},{"location":"checkout/#-watch","title":"--watch","text":"<p>Additionally, you can use --watch option to watch the progress of the test.</p> <p>After executing the command, you will see the output similar to the following:</p> <pre><code>./kci-dev.py checkout --giturl https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git --branch master --tipoftree --jobfilter baseline-nfs-arm64-qualcomm --jobfilter kbuild-gcc-12-arm64-chromeos-qualcomm --watch\napi connect: https://staging.kernelci.org:9100/\nRetrieving latest commit on tree: https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git branch: master\nCommit to checkout: d3d1556696c1a993eec54ac585fe5bf677e07474\nOK\nWatching for jobs on treeid: ad137d5a009f685d1c9c964897bcc35d552b031c9f542b433908fa1368b95465\nCurrent time: 2024-10-10 14:20:11\nTotal tree nodes 1 found.\nNode 6707b869322a7c560a1a2c69 job checkout State running Result None\nRefresh in 30s...Current time: 2024-10-10 14:20:41\nTotal tree nodes 1 found.\nNode 6707b869322a7c560a1a2c69 job checkout State running Result None\nRefresh in 30s...Current time: 2024-10-10 14:21:13\nTotal tree nodes 1 found.\nNode 6707b869322a7c560a1a2c69 job checkout State running Result None\nRefresh in 30s...Current time: 2024-10-10 14:21:43\nTotal tree nodes 1 found.\nNode 6707b869322a7c560a1a2c69 job checkout State running Result None\nRefresh in 30s...Current time: 2024-10-10 14:22:14\nTotal tree nodes 1 found.\nNode 6707b869322a7c560a1a2c69 job checkout State available Result None\nRefresh in 30s...Current time: 2024-10-10 14:22:45\nTotal tree nodes 2 found.\nNode 6707b869322a7c560a1a2c69 job checkout State available Result None\nNode 6707b8ed322a7c560a1a2dc2 job kbuild-gcc-12-arm64-chromeos-qualcomm State running Result None\n...\nRefresh in 30s...Current time: 2024-10-10 14:41:22\nTotal tree nodes 12 found.\nNode 6707b869322a7c560a1a2c69 job checkout State closing Result None\nNode 6707b8ed322a7c560a1a2dc2 job kbuild-gcc-12-arm64-chromeos-qualcomm State done Result pass\nNode 6707bc74322a7c560a1a38f6 job baseline-nfs-arm64-qualcomm State done Result pass\nNode 6707bc75322a7c560a1a38f7 job baseline-nfs-arm64-qualcomm State running Result None\nRefresh in 30s...Current time: 2024-10-10 14:41:53\nTotal tree nodes 12 found.\nNode 6707b869322a7c560a1a2c69 job checkout State closing Result None\nNode 6707b8ed322a7c560a1a2dc2 job kbuild-gcc-12-arm64-chromeos-qualcomm State done Result pass\nNode 6707bc74322a7c560a1a38f6 job baseline-nfs-arm64-qualcomm State done Result pass\nNode 6707bc75322a7c560a1a38f7 job baseline-nfs-arm64-qualcomm State running Result None\nRefresh in 30s...Current time: 2024-10-10 14:42:23\nTotal tree nodes 12 found.\nNode 6707b869322a7c560a1a2c69 job checkout State closing Result None\nNode 6707b8ed322a7c560a1a2dc2 job kbuild-gcc-12-arm64-chromeos-qualcomm State done Result pass\nNode 6707bc74322a7c560a1a38f6 job baseline-nfs-arm64-qualcomm State done Result pass\nNode 6707bc75322a7c560a1a38f7 job baseline-nfs-arm64-qualcomm State running Result None\n</code></pre> <p>The command will keep watching the progress of the test until all jobs are done. You can also stop the watching by pressing <code>Ctrl+C</code> or command will stop after all jobs are done(or failed).</p>"},{"location":"checkout/#-test","title":"--test","text":"<p>Together with --watch option, you can use --test option to wait for particular test results. Return code of kci-dev will depend on the test result:</p> <ul> <li><code>pass</code> - return code 0 (test passed)</li> <li><code>fail</code> - return code 1 (test failed)</li> <li><code>error</code> - return code 2 (prior steps failed, such as compilation, test setup, etc, or infrastructure error)</li> </ul> <p>For example:</p> <pre><code>kci-dev.py checkout --giturl https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git --branch master --tipoftree --jobfilter baseline-nfs-arm64-qualcomm --jobfilter kbuild-gcc-12-arm64-chromeos-qualcomm --platformfilter sc7180-trogdor-kingoftown --watch --test crit\n</code></pre> <p>This command will wait for the test results of the test with the name <code>crit</code>. It will follow first jobs, such as <code>checkout</code>, <code>kbuild-gcc-12-arm64-chromeos-qualcomm</code>, <code>baseline-nfs-arm64-qualcomm</code> and when they are complete will wait until timeout for the test <code>crit</code> to finish. If the test <code>crit</code> will pass, the command will return 0, if it will fail, the command will return 1, if any of the jobs will fail or timeout, the command will return 2.</p> <p>This command can be used for regression bisection, where you can test if the test <code>crit</code> pass or fail on the specific commit.</p>"},{"location":"results/","title":"Results","text":""},{"location":"results/#results","title":"results","text":"<p>This command will show the test result by node id.</p> <p>Example:</p> <pre><code>kci-dev results --nodeid &lt;str: testnodeid&gt;\n</code></pre> <p>This command will show the results of tests by page nodes limit and page offset.</p> <p>Example:</p> <pre><code>kci-dev results --nodes --limit &lt;int: page nodes limit&gt; --offset &lt;int: page nodes offset&gt;\n</code></pre> <p>Result sample:</p> <pre><code>{'artifacts': None,\n 'created': '2024-10-04T00:49:15.691000',\n 'data': {'arch': 'x86_64',\n          'compiler': 'gcc-12',\n          'config_full': 'x86_64_defconfig+lab-setup+x86-board',\n          'defconfig': 'x86_64_defconfig',\n          'device': None,\n          'error_code': None,\n          'error_msg': None,\n          'job_context': None,\n          'job_id': None,\n          'kernel_revision': {'branch': 'staging-mainline',\n                              'commit': '232edaea0fd9b4b7feb7b43508834bba7e820584',\n                              'commit_message': 'staging-mainline-20241004.0',\n                              'commit_tags': ['staging-mainline-20241004.0'],\n                              'describe': 'staging-mainline-20241004.0',\n                              'patchset': None,\n                              'tip_of_branch': False,\n                              'tree': 'kernelci',\n                              'url': 'https://github.com/kernelci/linux.git',\n                              'version': {'extra': '-rc1-115-g232edaea0fd9b',\n                                          'name': None,\n                                          'patchlevel': 12,\n                                          'sublevel': None,\n                                          'version': 6}},\n          'kernel_type': 'bzimage',\n          'platform': 'hp-14b-na0052xx-zork',\n          'regression': None,\n          'runtime': 'lava-collabora',\n          'test_revision': None,\n          'test_source': None},\n 'debug': None,\n 'group': 'kselftest-exec',\n 'holdoff': None,\n 'id': '66ff3b8c0abcc4c8343d1c71',\n 'jobfilter': None,\n 'kind': 'test',\n 'name': 'exec_execveat_Check_success_of_execveat_20_4096',\n 'owner': 'staging.kernelci.org',\n 'parent': '66ff3b8b0abcc4c8343d1b8a',\n 'path': ['checkout',\n          'kbuild-gcc-12-x86',\n          'kselftest-exec',\n          'kselftest-exec',\n          'exec_execveat_Check_success_of_execveat_20_4096'],\n 'result': 'pass',\n 'state': 'done',\n 'submitter': 'service:pipeline',\n 'timeout': '2024-10-04T06:49:15.691000',\n 'treeid': 'a44035dadc31327a5c30db4013b0e7e90acbb6a8fc45f94a6d91671e76cdfd8a',\n 'updated': '2024-10-04T00:49:15.691000',\n 'user_groups': []}\n</code></pre> <p>testnodeid is the node id of the test job, which you can get from the KernelCI dashboard. Usually it is hexadecimal string.</p> <p>Additionally, for --nodes you can provide optional parameters --filter to filter the results by the given key and value. For example:</p> <pre><code>./kci-dev.py results --nodes --filter treeid=e25266f77837de335edba3c1b8d2a04edc2bfb195b77c44711d81ebea4494140 --filter kind=test\n</code></pre> <p>This command will show the nodes of tests in particular tree checkout. But as you might see, there is a lot of fields you might be not interested in.</p> <p>For this we have additional option --field, that will restrict output only to specified fields. For example:</p> <pre><code>./kci-dev.py results --nodes --filter treeid=e25266f77837de335edba3c1b8d2a04edc2bfb195b77c44711d81ebea4494140 --filter kind=test --field name --field result\n</code></pre> <p>Example:</p> <pre><code>{'name': 'kver', 'result': 'pass'}\n{'name': 'config', 'result': 'pass'}\n{'name': 'build', 'result': 'pass'}\n{'name': 'example_init_test', 'result': 'pass'}\n{'name': 'time64_to_tm_test_date_range', 'result': 'pass'}\n{'name': 'test_one_cpu', 'result': 'skip'}\n{'name': 'test_many_cpus', 'result': 'skip'}\n{'name': 'test_one_task_on_all_cpus', 'result': 'skip'}\n{'name': 'test_two_tasks_on_all_cpus', 'result': 'skip'}\n{'name': 'test_one_task_on_one_cpu', 'result': 'skip'}\n{'name': 'test_one_task_mixed', 'result': 'skip'}\n{'name': 'test_two_tasks_on_one_cpu', 'result': 'skip'}\n{'name': 'test_two_tasks_on_one_all_cpus', 'result': 'skip'}\n{'name': 'test_task_on_all_and_one_cpu', 'result': 'skip'}\n{'name': 'resource_test_union', 'result': 'pass'}\n{'name': 'resource_test_intersection', 'result': 'pass'}\n....\n</code></pre>"},{"location":"testretry/","title":"Testretry","text":""},{"location":"testretry/#testretry","title":"testretry","text":"<p>This command will retry the failed tests. In some cases tests may fail due to network issues, hardware problems, nature of test (flaky), etc. This command will retry the failed tests, and create additional test jobs for the failed tests. After observing the results, you can decide if test results were reliable, not, or maybe even test need improvement.</p> <p>Example:</p> <pre><code>kci-dev testretry --nodeid &lt;str: testnodeid&gt;\n</code></pre> <p>testnodeid is the node id of the test job, which you can get from the KernelCI dashboard. Usually it is hexadecimal string.</p>"}]}